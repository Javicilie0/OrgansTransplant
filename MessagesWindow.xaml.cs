using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace OrgnTransplant
{
    public partial class MessagesWindow : Window
    {
        private string currentHospital;

        public MessagesWindow(string hospitalName)
        {
            InitializeComponent();
            currentHospital = hospitalName;
            HospitalNameText.Text = hospitalName;
            LoadInboxMessages();
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–≤–∞ –≤—Ö–æ–¥—è—â–∏ —Å—ä–æ–±—â–µ–Ω–∏—è
        /// </summary>
        private void ShowInbox_Click(object sender, RoutedEventArgs e)
        {
            // –°–º—è–Ω–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∏—è —Ç–∞–±
            InboxTabButton.Style = (Style)FindResource("ActiveTabButton");
            OutboxTabButton.Style = (Style)FindResource("TabButton");

            // –°–º—è–Ω–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—Ç–∞
            InboxGrid.Visibility = Visibility.Visible;
            OutboxGrid.Visibility = Visibility.Collapsed;

            LoadInboxMessages();
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–≤–∞ –∏–∑—Ö–æ–¥—è—â–∏ —Å—ä–æ–±—â–µ–Ω–∏—è
        /// </summary>
        private void ShowOutbox_Click(object sender, RoutedEventArgs e)
        {
            // –°–º—è–Ω–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∏—è —Ç–∞–±
            InboxTabButton.Style = (Style)FindResource("TabButton");
            OutboxTabButton.Style = (Style)FindResource("ActiveTabButton");

            // –°–º—è–Ω–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—Ç–∞
            InboxGrid.Visibility = Visibility.Collapsed;
            OutboxGrid.Visibility = Visibility.Visible;

            LoadOutboxMessages();
        }

        /// <summary>
        /// –û–±–Ω–æ–≤—è–≤–∞ —Å—ä–æ–±—â–µ–Ω–∏—è—Ç–∞
        /// </summary>
        private void RefreshMessages_Click(object sender, RoutedEventArgs e)
        {
            if (InboxGrid.Visibility == Visibility.Visible)
            {
                LoadInboxMessages();
            }
            else
            {
                LoadOutboxMessages();
            }
        }

        /// <summary>
        /// –ó–∞—Ä–µ–∂–¥–∞ –≤—Ö–æ–¥—è—â–∏—Ç–µ —Å—ä–æ–±—â–µ–Ω–∏—è
        /// </summary>
        private void LoadInboxMessages()
        {
            try
            {
                InboxMessagesPanel.Children.Clear();
                List<Message> messages = MessagesHelper.GetReceivedMessages(currentHospital);

                if (messages.Count == 0)
                {
                    InboxEmptyState.Visibility = Visibility.Visible;
                    return;
                }

                InboxEmptyState.Visibility = Visibility.Collapsed;

                foreach (var message in messages)
                {
                    InboxMessagesPanel.Children.Add(CreateInboxMessageCard(message));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—Ö–æ–¥—è—â–∏ —Å—ä–æ–±—â–µ–Ω–∏—è:\n\n{ex.Message}",
                    "–ì—Ä–µ—à–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –ó–∞—Ä–µ–∂–¥–∞ –∏–∑—Ö–æ–¥—è—â–∏—Ç–µ —Å—ä–æ–±—â–µ–Ω–∏—è
        /// </summary>
        private void LoadOutboxMessages()
        {
            try
            {
                OutboxMessagesPanel.Children.Clear();
                List<Message> messages = MessagesHelper.GetSentMessages(currentHospital);

                if (messages.Count == 0)
                {
                    OutboxEmptyState.Visibility = Visibility.Visible;
                    return;
                }

                OutboxEmptyState.Visibility = Visibility.Collapsed;

                foreach (var message in messages)
                {
                    OutboxMessagesPanel.Children.Add(CreateOutboxMessageCard(message));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑—Ö–æ–¥—è—â–∏ —Å—ä–æ–±—â–µ–Ω–∏—è:\n\n{ex.Message}",
                    "–ì—Ä–µ—à–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –°—ä–∑–¥–∞–≤–∞ –∫–∞—Ä—Ç–∞ –∑–∞ –≤—Ö–æ–¥—è—â–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        private Border CreateInboxMessageCard(Message message)
        {
            Border card = new Border
            {
                Background = Brushes.White,
                BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#E0E0E0")),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(8),
                Padding = new Thickness(20),
                Margin = new Thickness(0, 0, 0, 15)
            };

            Grid grid = new Grid();
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });

            // –õ—è–≤–∞ —á–∞—Å—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            StackPanel leftPanel = new StackPanel();

            // –•–µ–¥—ä—Ä
            StackPanel headerPanel = new StackPanel { Orientation = Orientation.Horizontal };

            TextBlock fromText = new TextBlock
            {
                Text = $"–û—Ç: {message.FromHospital}",
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#2C3E50"))
            };
            headerPanel.Children.Add(fromText);

            // –°—Ç–∞—Ç—É—Å –±–∞–¥–∂
            Border statusBadge = CreateStatusBadge(message.Status);
            statusBadge.Margin = new Thickness(15, 0, 0, 0);
            headerPanel.Children.Add(statusBadge);

            leftPanel.Children.Add(headerPanel);

            // –û—Ä–≥–∞–Ω –∏ –¥–æ–Ω–æ—Ä
            TextBlock organText = new TextBlock
            {
                Text = $"ü´Ä –û—Ä–≥–∞–Ω: {message.OrganName}",
                FontSize = 14,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#34495E")),
                Margin = new Thickness(0, 8, 0, 0)
            };
            leftPanel.Children.Add(organText);

            if (!string.IsNullOrEmpty(message.DonorName))
            {
                TextBlock donorText = new TextBlock
                {
                    Text = $"üë§ –î–æ–Ω–æ—Ä: {message.DonorName}",
                    FontSize = 14,
                    Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#34495E")),
                    Margin = new Thickness(0, 5, 0, 0)
                };
                leftPanel.Children.Add(donorText);
            }

            // –°—ä–æ–±—â–µ–Ω–∏–µ
            if (!string.IsNullOrEmpty(message.MessageText))
            {
                TextBlock messageText = new TextBlock
                {
                    Text = $"üí¨ {message.MessageText}",
                    FontSize = 13,
                    Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#7F8C8D")),
                    Margin = new Thickness(0, 10, 0, 0),
                    TextWrapping = TextWrapping.Wrap
                };
                leftPanel.Children.Add(messageText);
            }

            // –î–∞—Ç–∞
            TextBlock dateText = new TextBlock
            {
                Text = $"üìÖ {message.CreatedAt:dd.MM.yyyy HH:mm}",
                FontSize = 12,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#95A5A6")),
                Margin = new Thickness(0, 10, 0, 0)
            };
            leftPanel.Children.Add(dateText);

            // –ë—É—Ç–æ–Ω –∑–∞ –∫–∞—Ä—Ç–∞
            Button mapButton = new Button
            {
                Content = "üó∫Ô∏è –ü–æ–∫–∞–∂–∏ –º–∞—Ä—à—Ä—É—Ç",
                Background = Brushes.White,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#4FACFE")),
                BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#4FACFE")),
                BorderThickness = new Thickness(2),
                FontSize = 13,
                FontWeight = FontWeights.SemiBold,
                Padding = new Thickness(15, 8, 15, 8),
                Cursor = System.Windows.Input.Cursors.Hand,
                Margin = new Thickness(0, 10, 0, 0),
                HorizontalAlignment = HorizontalAlignment.Left
            };
            mapButton.Click += (s, e) => ShowMapForMessage(message);
            leftPanel.Children.Add(mapButton);

            // –ê–∫–æ –∏–º–∞ –æ—Ç–≥–æ–≤–æ—Ä
            if (message.Status != MessageStatus.Pending)
            {
                Border responseBorder = new Border
                {
                    Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#ECF0F1")),
                    CornerRadius = new CornerRadius(6),
                    Padding = new Thickness(12),
                    Margin = new Thickness(0, 10, 0, 0)
                };

                StackPanel responsePanel = new StackPanel();

                TextBlock responseLabel = new TextBlock
                {
                    Text = "‚úÖ –í–∞—à–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä:",
                    FontSize = 13,
                    FontWeight = FontWeights.SemiBold,
                    Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#27AE60"))
                };
                responsePanel.Children.Add(responseLabel);

                // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–µ–∫—Å—Ç–∞ —Å–∞–º–æ –∞–∫–æ –∏–º–∞ —Ç–∞–∫—ä–≤
                if (!string.IsNullOrEmpty(message.ResponseText))
                {
                    TextBlock responseText = new TextBlock
                    {
                        Text = message.ResponseText,
                        FontSize = 13,
                        Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#34495E")),
                        Margin = new Thickness(0, 5, 0, 0),
                        TextWrapping = TextWrapping.Wrap
                    };
                    responsePanel.Children.Add(responseText);
                }

                // –û–ø—Ü–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ - –ø–æ–∫–∞–∑–≤–∞–º–µ –≤–∏–Ω–∞–≥–∏ –ø—Ä–∏ –ø—Ä–∏–µ—Ç–∏ –∑–∞—è–≤–∫–∏
                if (message.Status == MessageStatus.Accepted)
                {
                    string deliveryText = message.DeliveryOption == DeliveryOption.WithDriver ? "üöó –° —à–æ—Ñ—å–æ—Ä" :
                                         message.DeliveryOption == DeliveryOption.WithHelicopter ? "üöÅ –° —Ö–µ–ª–∏–∫–æ–ø—Ç–µ—Ä" :
                                         message.DeliveryOption == DeliveryOption.PickupRequired ? "üö∂ –í–∑–µ–º–∞–Ω–µ –ª–∏—á–Ω–æ" :
                                         "‚ö†Ô∏è –ù–µ—É—Ç–æ—á–Ω–µ–Ω–æ";

                    TextBlock deliveryTextBlock = new TextBlock
                    {
                        Text = deliveryText,
                        FontSize = 13,
                        FontWeight = FontWeights.SemiBold,
                        Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#3498DB")),
                        Margin = new Thickness(0, 5, 0, 0)
                    };
                    responsePanel.Children.Add(deliveryTextBlock);
                }

                responseBorder.Child = responsePanel;
                leftPanel.Children.Add(responseBorder);
            }

            Grid.SetColumn(leftPanel, 0);
            grid.Children.Add(leftPanel);

            // –î—è—Å–Ω–∞ —á–∞—Å—Ç - –±—É—Ç–æ–Ω–∏
            if (message.Status == MessageStatus.Pending)
            {
                StackPanel buttonPanel = new StackPanel { Orientation = Orientation.Vertical };

                Button acceptButton = new Button
                {
                    Content = "‚úÖ –ü—Ä–∏–µ–º–∏",
                    Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#27AE60")),
                    Foreground = Brushes.White,
                    FontSize = 13,
                    FontWeight = FontWeights.SemiBold,
                    Padding = new Thickness(20, 8, 20, 8),
                    Cursor = System.Windows.Input.Cursors.Hand,
                    BorderThickness = new Thickness(0, 0, 0, 0),
                    Width = 150
                };
                acceptButton.Click += (s, e) => RespondToMessage(message, MessageStatus.Accepted);
                buttonPanel.Children.Add(acceptButton);

                Button rejectButton = new Button
                {
                    Content = "‚ùå –û—Ç—Ö–≤—ä—Ä–ª–∏",
                    Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#E74C3C")),
                    Foreground = Brushes.White,
                    FontSize = 13,
                    FontWeight = FontWeights.SemiBold,
                    Padding = new Thickness(20, 8, 20, 8),
                    Cursor = System.Windows.Input.Cursors.Hand,
                    BorderThickness = new Thickness(0, 0, 0, 0),
                    Width = 150,
                    Margin = new Thickness(0, 10, 0, 0)
                };
                rejectButton.Click += (s, e) => RespondToMessage(message, MessageStatus.Rejected);
                buttonPanel.Children.Add(rejectButton);

                Grid.SetColumn(buttonPanel, 1);
                grid.Children.Add(buttonPanel);
            }

            card.Child = grid;
            return card;
        }

        /// <summary>
        /// –°—ä–∑–¥–∞–≤–∞ –∫–∞—Ä—Ç–∞ –∑–∞ –∏–∑—Ö–æ–¥—è—â–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        private Border CreateOutboxMessageCard(Message message)
        {
            Border card = new Border
            {
                Background = Brushes.White,
                BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#E0E0E0")),
                BorderThickness = new Thickness(1),
                CornerRadius = new CornerRadius(8),
                Padding = new Thickness(20),
                Margin = new Thickness(0, 0, 0, 15)
            };

            StackPanel panel = new StackPanel();

            // –•–µ–¥—ä—Ä
            StackPanel headerPanel = new StackPanel { Orientation = Orientation.Horizontal };

            TextBlock toText = new TextBlock
            {
                Text = $"–î–æ: {message.ToHospital}",
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#2C3E50"))
            };
            headerPanel.Children.Add(toText);

            // –°—Ç–∞—Ç—É—Å –±–∞–¥–∂
            Border statusBadge = CreateStatusBadge(message.Status);
            statusBadge.Margin = new Thickness(15, 0, 0, 0);
            headerPanel.Children.Add(statusBadge);

            panel.Children.Add(headerPanel);

            // –û—Ä–≥–∞–Ω
            TextBlock organText = new TextBlock
            {
                Text = $"ü´Ä –û—Ä–≥–∞–Ω: {message.OrganName}",
                FontSize = 14,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#34495E")),
                Margin = new Thickness(0, 8, 0, 0)
            };
            panel.Children.Add(organText);

            // –î–æ–Ω–æ—Ä
            if (!string.IsNullOrEmpty(message.DonorName))
            {
                TextBlock donorText = new TextBlock
                {
                    Text = $"üë§ –î–æ–Ω–æ—Ä: {message.DonorName}",
                    FontSize = 14,
                    Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#34495E")),
                    Margin = new Thickness(0, 5, 0, 0)
                };
                panel.Children.Add(donorText);
            }

            // –°—ä–æ–±—â–µ–Ω–∏–µ
            if (!string.IsNullOrEmpty(message.MessageText))
            {
                TextBlock messageText = new TextBlock
                {
                    Text = $"üí¨ {message.MessageText}",
                    FontSize = 13,
                    Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#7F8C8D")),
                    Margin = new Thickness(0, 10, 0, 0),
                    TextWrapping = TextWrapping.Wrap
                };
                panel.Children.Add(messageText);
            }

            // –î–∞—Ç–∞
            TextBlock dateText = new TextBlock
            {
                Text = $"üìÖ {message.CreatedAt:dd.MM.yyyy HH:mm}",
                FontSize = 12,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#95A5A6")),
                Margin = new Thickness(0, 10, 0, 0)
            };
            panel.Children.Add(dateText);

            // –ë—É—Ç–æ–Ω –∑–∞ –∫–∞—Ä—Ç–∞
            Button mapButton = new Button
            {
                Content = "üó∫Ô∏è –ü–æ–∫–∞–∂–∏ –º–∞—Ä—à—Ä—É—Ç",
                Background = Brushes.White,
                Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#4FACFE")),
                BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#4FACFE")),
                BorderThickness = new Thickness(2),
                FontSize = 13,
                FontWeight = FontWeights.SemiBold,
                Padding = new Thickness(15, 8, 15, 8),
                Cursor = System.Windows.Input.Cursors.Hand,
                Margin = new Thickness(0, 10, 0, 0),
                HorizontalAlignment = HorizontalAlignment.Left
            };
            mapButton.Click += (s, e) => ShowMapForMessage(message);
            panel.Children.Add(mapButton);

            // –ê–∫–æ –∏–º–∞ –æ—Ç–≥–æ–≤–æ—Ä
            if (message.Status != MessageStatus.Pending)
            {
                Border responseBorder = new Border
                {
                    Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#E8F8F5")),
                    CornerRadius = new CornerRadius(6),
                    Padding = new Thickness(12),
                    Margin = new Thickness(0, 10, 0, 0)
                };

                StackPanel responsePanel = new StackPanel();

                TextBlock responseLabel = new TextBlock
                {
                    Text = "üì® –û—Ç–≥–æ–≤–æ—Ä –æ—Ç –±–æ–ª–Ω–∏—Ü–∞—Ç–∞:",
                    FontSize = 13,
                    FontWeight = FontWeights.SemiBold,
                    Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#16A085"))
                };
                responsePanel.Children.Add(responseLabel);

                // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ç–µ–∫—Å—Ç–∞ —Å–∞–º–æ –∞–∫–æ –∏–º–∞ —Ç–∞–∫—ä–≤
                if (!string.IsNullOrEmpty(message.ResponseText))
                {
                    TextBlock responseText = new TextBlock
                    {
                        Text = message.ResponseText,
                        FontSize = 13,
                        Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#34495E")),
                        Margin = new Thickness(0, 5, 0, 0),
                        TextWrapping = TextWrapping.Wrap
                    };
                    responsePanel.Children.Add(responseText);
                }

                // –û–ø—Ü–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
                if (message.Status == MessageStatus.Accepted)
                {
                    string deliveryText = message.DeliveryOption == DeliveryOption.WithDriver ? "üöó –° —à–æ—Ñ—å–æ—Ä" :
                                         message.DeliveryOption == DeliveryOption.WithHelicopter ? "üöÅ –° —Ö–µ–ª–∏–∫–æ–ø—Ç–µ—Ä" :
                                         message.DeliveryOption == DeliveryOption.PickupRequired ? "üö∂ –í–∑–µ–º–∞–Ω–µ –ª–∏—á–Ω–æ" :
                                         "‚ö†Ô∏è –ù–µ—É—Ç–æ—á–Ω–µ–Ω–æ";

                    TextBlock deliveryTextBlock = new TextBlock
                    {
                        Text = deliveryText,
                        FontSize = 13,
                        FontWeight = FontWeights.SemiBold,
                        Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#3498DB")),
                        Margin = new Thickness(0, 5, 0, 0)
                    };
                    responsePanel.Children.Add(deliveryTextBlock);
                }

                responseBorder.Child = responsePanel;
                panel.Children.Add(responseBorder);
            }

            card.Child = panel;
            return card;
        }

        /// <summary>
        /// –°—ä–∑–¥–∞–≤–∞ –±–∞–¥–∂ –∑–∞ —Å—Ç–∞—Ç—É—Å
        /// </summary>
        private Border CreateStatusBadge(MessageStatus status)
        {
            string text = "";
            string bgColor = "";

            switch (status)
            {
                case MessageStatus.Pending:
                    text = "‚è≥ –ß–∞–∫–∞ –æ—Ç–≥–æ–≤–æ—Ä";
                    bgColor = "#F39C12";
                    break;
                case MessageStatus.Accepted:
                    text = "‚úÖ –ü—Ä–∏–µ—Ç–∞";
                    bgColor = "#27AE60";
                    break;
                case MessageStatus.Rejected:
                    text = "‚ùå –û—Ç—Ö–≤—ä—Ä–ª–µ–Ω–∞";
                    bgColor = "#E74C3C";
                    break;
            }

            Border badge = new Border
            {
                Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(bgColor)),
                CornerRadius = new CornerRadius(12),
                Padding = new Thickness(12, 4, 12, 4),
                VerticalAlignment = VerticalAlignment.Center
            };

            TextBlock badgeText = new TextBlock
            {
                Text = text,
                FontSize = 12,
                FontWeight = FontWeights.SemiBold,
                Foreground = Brushes.White
            };

            badge.Child = badgeText;
            return badge;
        }

        /// <summary>
        /// –û—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        private void RespondToMessage(Message message, MessageStatus status)
        {
            try
            {
                // –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –æ—Ç–≥–æ–≤–æ—Ä
                RespondWindow respondWindow = new RespondWindow(message, status);
                if (respondWindow.ShowDialog() == true)
                {
                    // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞
                    LoadInboxMessages();

                    MessageBox.Show("–û—Ç–≥–æ–≤–æ—Ä—ä—Ç –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                        "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–≥–æ–≤–æ—Ä –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ:\n\n{ex.Message}",
                    "–ì—Ä–µ—à–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–≤–∞ –∫–∞—Ä—Ç–∞ —Å –º–∞—Ä—à—Ä—É—Ç –∑–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        private void ShowMapForMessage(Message message)
        {
            try
            {
                // –í–∑–µ–º–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –±–æ–ª–Ω–∏—Ü–∏—Ç–µ
                var fromHospital = HospitalLocation.GetByName(message.FromHospital);
                var toHospital = HospitalLocation.GetByName(message.ToHospital);

                if (fromHospital == null)
                {
                    MessageBox.Show($"–ë–æ–ª–Ω–∏—Ü–∞—Ç–∞ \"{message.FromHospital}\" –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏.",
                        "–ì—Ä–µ—à–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (toHospital == null)
                {
                    MessageBox.Show($"–ë–æ–ª–Ω–∏—Ü–∞—Ç–∞ \"{message.ToHospital}\" –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏.",
                        "–ì—Ä–µ—à–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // –í–∑–µ–º–∞–º–µ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∞ –≤ —á–∞—Å–æ–≤–µ
                double organViabilityHours = OrganViability.GetViabilityHours(message.OrganName);

                // –û—Ç–≤–∞—Ä—è–º–µ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞ —Å –∫–∞—Ä—Ç–∞—Ç–∞
                MapWindow mapWindow = new MapWindow(
                    fromHospital.Latitude,
                    fromHospital.Longitude,
                    fromHospital.Name,
                    toHospital.Latitude,
                    toHospital.Longitude,
                    toHospital.Name,
                    organViabilityHours);

                mapWindow.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞:\n\n{ex.Message}",
                    "–ì—Ä–µ—à–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
